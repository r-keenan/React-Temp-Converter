{"version":3,"sources":["webpack:///./ui/components/validator.js"],"names":["Validator","props","state","options","value","text","optionsTarget","numericalValue","numericalValueChange","thi","e","setState","target","alert","map","option","key","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAEqBA,S;;;;;AACjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,aAAO,EAAE,CACL;AACIC,aAAK,EAAE,SADX;AACsBC,YAAI,EAAE;AAD5B,OADK,EAIL;AACID,aAAK,EAAE,SADX;AACsBC,YAAI,EAAE;AAD5B,OAJK,EAOL;AACID,aAAK,EAAE,YADX;AACyBC,YAAI,EAAE;AAD/B,OAPK,EAUL;AACID,aAAK,EAAE,QADX;AACqBC,YAAI,EAAE;AAD3B,OAVK,EAaL;AACID,aAAK,EAAE,aADX;AAC0BC,YAAI,EAAE;AADhC,OAbK,EAgBL;AACID,aAAK,EAAE,cADX;AAC2BC,YAAI,EAAE;AADjC,OAhBK,EAmBL;AACID,aAAK,EAAE,MADX;AACmBC,YAAI,EAAE;AADzB,OAnBK,EAsBL;AACID,aAAK,EAAE,YADX;AACyBC,YAAI,EAAE;AAD/B,OAtBK,EAyBL;AACID,aAAK,EAAE,SADX;AACsBC,YAAI,EAAE;AAD5B,OAzBK,CADA;AA8BTC,mBAAa,EAAE,EA9BN;AA+BTC,oBAAc,EAAE;AA/BP,KAAb;AAiCA,UAAKC,oBAAL,GAA4BC,GAA5B;AApCe;AAqClB;;;;yCAEoBC,C,EAAG;AACpB,WAAKC,QAAL,CAAc;AACVJ,sBAAc,EAAEG,CAAC,CAACE,MAAF,CAASR;AADf,OAAd;AAGH;;;6BAEQ;AACL,aACI,wEACI,yEACI;AAAO,eAAO,EAAC;AAAf,iCADJ,EAEI;AAAO,iBAAS,EAAC,cAAjB;AACI,YAAI,EAAC,MADT;AAEI,UAAE,EAAC,gBAFP;AAGI,gBAAQ,EAAE,KAAKI;AAHnB,QAFJ,EAOI;AAAO,eAAO,EAAC;AAAf,iCAPJ,EAQI;AACI,iBAAS,EAAC,cADd;AAEI,oBAAY,EAAC,SAFjB;AAGI,gBAAQ,EAAE;AAAA,iBAAMK,KAAK,CAAC,QAAD,CAAX;AAAA;AAHd,SAMI;AAAQ,aAAK,EAAC,SAAd;AAAwB,gBAAQ;AAAhC,yBANJ,EAOK,KAAKX,KAAL,CAAWC,OAAX,CAAmBW,GAAnB,CAAuB,UAACC,MAAD,EAASC,GAAT,EAAiB;AACrC,eAAO;AAAQ,eAAK,EAAED,MAAM,CAACX,KAAtB;AAA6B,aAAG,EAAEY;AAAlC,WAAwCD,MAAM,CAACV,IAA/C,CAAP;AACH,OAFA,CAPL,CARJ,EAoBI;AAAO,eAAO,EAAC;AAAf,kCApBJ,EAqBI;AAAQ,iBAAS,EAAC,cAAlB;AAAiC,oBAAY,EAAC;AAA9C,SACI;AAAQ,aAAK,EAAC;AAAd,yBADJ,CArBJ,CADJ,CADJ;AA6BH;;;;EA5EkCY,4CAAK,CAACC,S","file":"app.cc9567e01064d1c8d3eb.hot-update.js","sourcesContent":["import React from 'react';\n\nexport default class Validator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [\n                {\n                    value: 'rankine', text: 'Rankine'\n                },\n                {\n                    value: 'celsius', text: 'Celsius'\n                },\n                {\n                    value: 'fahrenheit', text: 'Fahrenheit'\n                },\n                {\n                    value: 'liters', text: 'Liters'\n                },\n                {\n                    value: 'tablespoons', text: 'Tablespoons'\n                },\n                {\n                    value: 'cubic-inches', text: 'Cubic Inches'\n                },\n                {\n                    value: 'cups', text: 'Cups'\n                },\n                {\n                    value: 'cubic-feet', text: 'Cubic Feet'\n                },\n                {\n                    value: 'gallons', text: 'Gallons'\n                }\n            ],\n            optionsTarget: [],\n            numericalValue: 0\n        };\n        this.numericalValueChange = thi\n    }\n\n    numericalValueChange(e) {\n        this.setState({\n            numericalValue: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <label htmlFor=\"numericalValue\">Input Numerical Value</label>\n                    <input className=\"form-control\"\n                        type=\"text\"\n                        id=\"numericalValue\"\n                        onChange={this.numericalValueChange}\n                    />\n                    <label htmlFor=\"unitOfMeasure\">Input Unit of Measure</label>\n                    <select\n                        className=\"form-control\"\n                        defaultValue=\"default\"\n                        onChange={() => alert('Hello!')}\n                        >\n                        {/*the disabled below is to stop it from being selected when selecting from the dropdown*/}\n                        <option value=\"default\" disabled>Please Select</option>\n                        {this.state.options.map((option, key) => {\n                            return <option value={option.value} key={key}>{option.text}</option>\n                        })}\n                    </select>\n\n                    <label htmlFor=\"targetOfMeasure\">Target Unit of Measure</label>\n                    <select className=\"form-control\" defaultValue=\"default\">\n                        <option value=\"default\">Please Select</option>\n                    </select>\n                </form>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}